# bup-split
# Autogenerated from man page /usr/share/man/man1/bup-split.1.gz
complete -c bup-split -s r -l remote -d 'save the backup set to the given remote server'
complete -c bup-split -s d -l date -d 'specify the date inscribed in the commit (seconds since 1970-01-01)'
complete -c bup-split -s q -l quiet -d 'disable progress messages'
complete -c bup-split -s v -l verbose -d 'increase verbosity (can be used more than once)'
complete -c bup-split -l git-ids -d 'stdin is a list of git object ids instead of raw data'
complete -c bup-split -l keep-boundaries -d 'if multiple filenames are given on the command line, they are normally concat…'
complete -c bup-split -l bench -d 'print benchmark timings to stderr'
complete -c bup-split -l max-pack-size -d 'never create git packfiles larger than the given number of bytes'
complete -c bup-split -l max-pack-objects -d 'never create git packfiles with more than the given number of objects'
complete -c bup-split -l fanout -d 'when splitting very large files, try and keep the number of elements in trees…'
complete -c bup-split -l bwlimit -d 'don\\[cq]t transmit more than \\f[I]bytes/sec\\f[R] bytes per second to the serv…'
complete -c bup-split -s n -l name -d 'after creating the dataset, create a git branch named name so that it can be …'
complete -c bup-split -s t -l tree -d 'output the git tree id of the resulting dataset'
complete -c bup-split -s c -l commit -d 'output the git commit id of the resulting dataset'
complete -c bup-split -s b -l blobs -d 'output a series of git blob ids that correspond to the chunks in the dataset'
complete -c bup-split -l noop -d 'read the data and split it into blocks based on the [lq]bupsplit[rq] rolling …'
complete -c bup-split -l copy -d 'like --noop, but also write the data to stdout'
complete -c bup-split -s '#' -l compress -d 'set the compression level to # (a value from 0-9, where 9 is the highest and …'

